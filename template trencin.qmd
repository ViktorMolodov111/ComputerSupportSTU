---
title: "Task 1 Trencin"
author: "Viktor Molodov"
date: "2025/10/27"
format:
  html:
    embed-resources: true
editor: source
---

## Question 1 Atomic Types

Create the following variables related to your chosen object:
- 4 numeric values (e.g., population, temperature, size, rating)  
- 3 integer values (e.g., number of buildings, inhabitants)  
- 2 logical values (e.g., has_river, is_capital)  
- 3 character values (e.g., name, region, country)

```{r}
# Numeric values
distance_to_bratislava_km <- 120.0     # distance to Bratislava in km
elevation_m <- 211                     # meters above sea level
area <- 82.0                           # km²
avg_density <- 870                     # people per km²

# Integer values
population <- 51000L
num_castles <- 1L
num_schools <- 15L

# Logical values
has_river <- TRUE
is_regional_capital <- TRUE

# Character values
name <- "Trencin"
nickname <- "City under the Castle"
region <- "Trenciansky kraj"
country <- "Slovakia"
```

```{r}
# Numeric vector

numeric_vector <- c(population, area, avg_density, elevation_m)
numeric_vector

# Sequence vector (5 to 80 step 5)

sequence_vector <- seq(from = 5, to = 80, by = 5)
sequence_vector

# Logical vector of 10 random TRUE/FALSE

set.seed(123)
logical_vector <- sample(c(TRUE, FALSE), size = 10, replace = TRUE)
logical_vector
```

```{r}
set.seed(42)

# 3×3 matrix with random integers between -40 and 40

m <- matrix(
sample(-40:40, size = 9, replace = TRUE),
nrow = 3, ncol = 3, byrow = TRUE
)

# Name rows/columns

rownames(m) <- c("Center", "Juh", "Sihoť")
colnames(m) <- c("January", "February", "March")

m

# Row and column means

row_avgs <- rowMeans(m)
col_avgs <- colMeans(m)

row_avgs
col_avgs
```

```{r}
trencin_list <- list(
description = "Trencin overview: numeric, logical, and text variables with a matrix and computed statistics.",

scalars = list(
population = population,
area = area,
has_river = has_river,
is_regional_capital = is_regional_capital,
name = name,
nickname = nickname,
region = region,
country = country
),

vectors = list(
numeric = numeric_vector,
sequence = sequence_vector,
logical = logical_vector
),

matrix = m,

matrix_stats = list(
row_means = row_avgs,
col_means = col_avgs
)
)

str(trencin_list)
```

```{r}
development_level <- factor(
c("high", "medium", "high", "low", "medium", "high", "medium"),
levels = c("low", "medium", "high"),
ordered = TRUE
)

# Check counts

table(development_level)
```

```{r}
trencin_df <- data.frame(
district = c("Center", "Juh", "Sihoť", "Kubra", "Orechove", "Zlatovce"),
population = c(18000, 12000, 8000, 5000, 4000, 5000),
has_school = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),
zone = factor(c("commercial", "residential", "residential", "industrial", "mixed", "residential"),
levels = c("residential", "mixed", "industrial", "commercial")),
dist_km = c(0.3, 1.2, 1.8, 3.0, 3.5, 2.2)
)

# Inspect structure and summary

str(trencin_df)
summary(trencin_df)

# Add derived column based on population and school availability

trencin_df$priority <- with(
trencin_df,
ifelse(population > 8000 & !has_school, "high",
ifelse(population > 8000, "medium", "low"))
)
trencin_df$priority <- factor(trencin_df$priority, levels = c("low", "medium", "high"), ordered = TRUE)

# Quick overview

table(trencin_df$zone)
table(trencin_df$priority)
trencin_df
```
